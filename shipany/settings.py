"""
Django settings for shipany project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
from shipany.common.logger import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$%9ib&5@*ccaf5c=8t=b))^4ay8lv%^_+60urn290$ud^n-*6d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

IS_LAMBDA_ENV = False # Whether current runtime env is AWS Lambda 

if DEBUG:
    DEBUG = True
    ch.setLevel(logging.INFO)
    logger.setLevel(logging.INFO)

ALLOWED_HOSTS = [ '127.0.0.1', '.execute-api.us-west-2.amazonaws.com' ]

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_swagger',
    'shipany.order_contract'
]

'''
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
}

REST_FRAMEWORK = {
    'PAGE_SIZE': 10,
}
'''

REST_FRAMEWORK = {
}

if not DEBUG:
    REST_FRAMEWORK = {
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
            'shipany.common.renderers.BrowsableAPIRendererWithoutForms',
        )
    }

SWAGGER_SETTINGS = {
#    'LOGIN_URL': 'rest_framework:login',
#    'LOGOUT_URL': 'rest_framework:logout',
    'USE_SESSION_AUTH': True,
    'DOC_EXPANSION': 'list',
    'APIS_SORTER': 'alpha',
    'JSON_EDITOR': True,
}

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-tk',
    'auth-tk',
    'api-tk',
    'uid'
)

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE_CLASSES = MIDDLEWARE

ROOT_URLCONF = 'shipany.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shipany.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# Copy our working DB to /tmp..
from shutil import copyfile
src = os.path.join(BASE_DIR, 'db.sqlite3')
dst = "/tmp/db.sqlite3"
if os.path.exists(src):
    copyfile(src, dst)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': dst,
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = "./shipany/static"

#STATIC_URL = '/static/'
#STATIC_URL = 'https://s3-us-west-2.amazonaws.com/shipany-django-static/'

if 'runserver' in sys.argv or 'migrate' in sys.argv:
    DB_MODE = 'local'
    IS_LAMBDA_ENV = False
else:
    DB_MODE = 'dynamodb'
    IS_LAMBDA_ENV = True

if DB_MODE is 'local':
    STATIC_URL = '/static/'
    print 'Using Local Static Folder'
else:
    STATIC_URL = 'https://s3-us-west-2.amazonaws.com/shipany-django-static/'
    print 'Using S3 Static Folder'

#STATIC_URL = '/static/'
#print 'Using Local Static Folder'
#DB_MODE = 'dynamodb'

DYNAMODB_REGION = "us-west-2"
if DB_MODE is 'local':
    DYNAMODB_URL = "http://localhost:18000"
    print 'Connect to local DynamoDB'
else:
    DYNAMODB_URL = "http://dynamodb.us-west-2.amazonaws.com"
    print 'Connect to AWS DynamoDB'

LOGIN_REDIRECT_URL = '/'
